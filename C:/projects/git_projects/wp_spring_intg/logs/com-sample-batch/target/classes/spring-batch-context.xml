<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
 
    <import resource="classpath:context-model.xml"/>
 
 
    <!-- JobRepository and JobLauncher are configuration/setup classes -->
    <!--<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" /> -->
    
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
    	<property name="dataSource" ref="dataSource" />
	    <property name="transactionManager" ref="transactionManager" />
	    <property name="databaseType" value="mysql" />
    </bean>
 
    <bean id="jobLauncher"   class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
    
     <bean id="dealService" class="com.sample.batch.service.DealService" autowire="constructor"/>
 
	 <bean id="pendingDealStatusReader" class="com.sample.batch.item.PendingDealStatusReader" scope="step">
	 <constructor-arg ref="dealService" />
	  <!--<property name="dealService" ref="dealService"/> -->	  
	</bean>
 
    <!-- ItemWriter which writes data to database -->
    <bean id="pendingDealStatusWriter" class="com.sample.batch.item.PendingDealWriter">
       <property name="dealService" ref="dealService"/>	  
    </bean>
 
 
    <!-- Optional ItemProcessor to perform business logic/filtering on the input records -->
    <bean id="pendingDealStatusProcessor" class="com.sample.batch.item.PendingDealStatusProcessor" />
 
    <!-- Optional JobExecutionListener to perform business logic before and after the job -->
   <!--   <bean id="jobListener" class="com.websystique.springbatch.ExamResultJobListener" /> -->
 
 
    <!-- Actual Job -->
    <batch:job id="dealStatusChangeJob">
        <batch:step id="step1">
            <batch:tasklet transaction-manager="transactionManager" allow-start-if-complete="true">
                <batch:chunk reader="pendingDealStatusReader" writer="pendingDealStatusWriter"
                    processor="pendingDealStatusProcessor" commit-interval="1" />
            </batch:tasklet>
        </batch:step>
       <!-- <batch:listeners>
            <batch:listener ref="jobListener" />
        </batch:listeners> -->
    </batch:job>
    
    <bean id="dealStatusPendingScheduler" class="com.sample.batch.scheduler.DealStatusPendingScheduler">
     <constructor-arg ref="jobLauncher"/>
   	  <constructor-arg ref="dealStatusChangeJob"/>
    </bean>  
 <!--  this is where we are scheduling the job to run using our scheduler every 5 secs, note how the method of the scheduler and the cron expression to be used are being specified -->

	    <task:scheduled-tasks>
	        <task:scheduled ref="dealStatusPendingScheduler" method="run" cron="*/5 * * * * *"/>
	    </task:scheduled-tasks>
 
</beans>